// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using Voidwell.DaybreakGames.Data.DBContext;

namespace Voidwell.DaybreakGames.Data.Migrations
{
    [DbContext(typeof(PS2DbContext))]
    partial class PS2DbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("public")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.0-rtm-26452");

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbAlert", b =>
                {
                    b.Property<string>("WorldId");

                    b.Property<string>("MetagameInstanceId");

                    b.Property<DateTime>("EndDate");

                    b.Property<float>("LastFactionNc");

                    b.Property<float>("LastFactionTr");

                    b.Property<float>("LastFactionVs");

                    b.Property<string>("MetagameEventId");

                    b.Property<DateTime>("StartDate");

                    b.Property<float>("StartFactionNc");

                    b.Property<float>("StartFactionTr");

                    b.Property<float>("StartFactionVs");

                    b.Property<string>("ZoneId");

                    b.HasKey("WorldId", "MetagameInstanceId");

                    b.HasIndex("MetagameEventId");

                    b.ToTable("Alert");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacter", b =>
                {
                    b.Property<string>("Id");

                    b.Property<int>("BattleRank");

                    b.Property<int>("BattleRankPercentToNext");

                    b.Property<int>("CertsEarned");

                    b.Property<string>("FactionId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("TitleId");

                    b.Property<string>("WorldId");

                    b.HasKey("Id");

                    b.HasIndex("FactionId");

                    b.HasIndex("TitleId");

                    b.HasIndex("WorldId");

                    b.ToTable("Character");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacterStat", b =>
                {
                    b.Property<string>("CharacterId");

                    b.Property<string>("ProfileId");

                    b.Property<int>("AchievementCount");

                    b.Property<int>("AssistCount");

                    b.Property<int>("Deaths");

                    b.Property<int>("DominationCount");

                    b.Property<int>("FacilityCaptureCount");

                    b.Property<int>("FacilityDefendedCount");

                    b.Property<int>("FireCount");

                    b.Property<int>("HitCount");

                    b.Property<string>("Id");

                    b.Property<int>("KilledBy");

                    b.Property<int>("Kills");

                    b.Property<int>("MedalCount");

                    b.Property<int>("PlayTime");

                    b.Property<int>("RevengeCount");

                    b.Property<int>("Score");

                    b.Property<int>("SkillPoints");

                    b.Property<int>("WeaponDamageGiven");

                    b.Property<int>("WeaponDamageTakenBy");

                    b.Property<int>("WeaponDeaths");

                    b.Property<int>("WeaponFireCount");

                    b.Property<int>("WeaponHeadshots");

                    b.Property<int>("WeaponHitCount");

                    b.Property<int>("WeaponKilledBy");

                    b.Property<int>("WeaponKills");

                    b.Property<int>("WeaponPlayTime");

                    b.Property<int>("WeaponScore");

                    b.Property<int>("WeaponVehicleKills");

                    b.HasKey("CharacterId", "ProfileId");

                    b.HasIndex("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("CharacterStat");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacterStatByFaction", b =>
                {
                    b.Property<string>("CharacterId");

                    b.Property<string>("ProfileId");

                    b.Property<int>("DominationCountNC");

                    b.Property<int>("DominationCountTR");

                    b.Property<int>("DominationCountVS");

                    b.Property<int>("FacilityCaptureCountNC");

                    b.Property<int>("FacilityCaptureCountTR");

                    b.Property<int>("FacilityCaptureCountVS");

                    b.Property<string>("Id");

                    b.Property<int>("KilledByNC");

                    b.Property<int>("KilledByTR");

                    b.Property<int>("KilledByVS");

                    b.Property<int>("KillsNC");

                    b.Property<int>("KillsTR");

                    b.Property<int>("KillsVS");

                    b.Property<int>("RevengeCountNC");

                    b.Property<int>("RevengeCountTR");

                    b.Property<int>("RevengeCountVS");

                    b.Property<int>("WeaponDamageGivenNC");

                    b.Property<int>("WeaponDamageGivenTR");

                    b.Property<int>("WeaponDamageGivenVS");

                    b.Property<int>("WeaponDamageTakenByNC");

                    b.Property<int>("WeaponDamageTakenByTR");

                    b.Property<int>("WeaponDamageTakenByVS");

                    b.Property<int>("WeaponHeadshotsNC");

                    b.Property<int>("WeaponHeadshotsTR");

                    b.Property<int>("WeaponHeadshotsVS");

                    b.Property<int>("WeaponKilledByNC");

                    b.Property<int>("WeaponKilledByTR");

                    b.Property<int>("WeaponKilledByVS");

                    b.Property<int>("WeaponKillsNC");

                    b.Property<int>("WeaponKillsTR");

                    b.Property<int>("WeaponKillsVS");

                    b.Property<int>("WeaponVehicleKillsNC");

                    b.Property<int>("WeaponVehicleKillsTR");

                    b.Property<int>("WeaponVehicleKillsVS");

                    b.HasKey("CharacterId", "ProfileId");

                    b.HasIndex("Id");

                    b.HasIndex("ProfileId");

                    b.ToTable("CharacterStatByFaction");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacterTime", b =>
                {
                    b.Property<string>("CharacterId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("LastLoginDate");

                    b.Property<DateTime>("LastSaveDate");

                    b.Property<int>("MinutesPlayed");

                    b.HasKey("CharacterId");

                    b.ToTable("CharacterTime");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacterUpdateQueue", b =>
                {
                    b.Property<string>("CharacterId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Timestamp");

                    b.HasKey("CharacterId");

                    b.ToTable("CharacterUpdateQueue");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacterWeaponStat", b =>
                {
                    b.Property<string>("CharacterId");

                    b.Property<string>("ItemId");

                    b.Property<string>("VehicleId");

                    b.Property<int>("DamageGiven");

                    b.Property<int>("DamageTakenBy");

                    b.Property<int>("Deaths");

                    b.Property<int>("FireCount");

                    b.Property<int>("Headshots");

                    b.Property<int>("HitCount");

                    b.Property<string>("Id");

                    b.Property<int>("KilledBy");

                    b.Property<int>("Kills");

                    b.Property<int>("PlayTime");

                    b.Property<int>("Score");

                    b.Property<int>("VehicleKills");

                    b.HasKey("CharacterId", "ItemId", "VehicleId");

                    b.HasIndex("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("Kills");

                    b.HasIndex("VehicleId");

                    b.ToTable("CharacterWeaponStat");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacterWeaponStatByFaction", b =>
                {
                    b.Property<string>("CharacterId");

                    b.Property<string>("ItemId");

                    b.Property<string>("VehicleId");

                    b.Property<int>("DamageGivenNC");

                    b.Property<int>("DamageGivenTR");

                    b.Property<int>("DamageGivenVS");

                    b.Property<int>("DamageTakenByNC");

                    b.Property<int>("DamageTakenByTR");

                    b.Property<int>("DamageTakenByVS");

                    b.Property<int>("HeadshotsNC");

                    b.Property<int>("HeadshotsTR");

                    b.Property<int>("HeadshotsVS");

                    b.Property<string>("Id");

                    b.Property<int>("KilledByNC");

                    b.Property<int>("KilledByTR");

                    b.Property<int>("KilledByVS");

                    b.Property<int>("KillsNC");

                    b.Property<int>("KillsTR");

                    b.Property<int>("KillsVS");

                    b.Property<int>("VehicleKillsNC");

                    b.Property<int>("VehicleKillsTR");

                    b.Property<int>("VehicleKillsVS");

                    b.HasKey("CharacterId", "ItemId", "VehicleId");

                    b.HasIndex("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("VehicleId");

                    b.ToTable("CharacterWeaponStatByFaction");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbEventAchievementEarned", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("CharacterId");

                    b.Property<string>("AchievementId");

                    b.Property<string>("WorldId");

                    b.Property<string>("ZoneId");

                    b.HasKey("Timestamp", "CharacterId");

                    b.ToTable("EventAchievementEarned");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbEventBattlerankUp", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("CharacterId");

                    b.Property<int>("BattleRank");

                    b.Property<string>("WorldId");

                    b.Property<string>("ZoneId");

                    b.HasKey("Timestamp", "CharacterId");

                    b.ToTable("EventBattlerankUp");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbEventContinentLock", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("WorldId");

                    b.Property<string>("ZoneId");

                    b.Property<string>("MetagameEventId");

                    b.Property<float>("PopulationNc");

                    b.Property<float>("PopulationTr");

                    b.Property<float>("PopulationVs");

                    b.Property<string>("TriggeringFaction");

                    b.HasKey("Timestamp", "WorldId", "ZoneId");

                    b.ToTable("EventContinentLock");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbEventContinentUnlock", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("WorldId");

                    b.Property<string>("ZoneId");

                    b.Property<string>("MetagameEventId");

                    b.Property<string>("TriggeringFaction");

                    b.HasKey("Timestamp", "WorldId", "ZoneId");

                    b.ToTable("EventContinentUnkock");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbEventDeath", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("AttackerCharacterId");

                    b.Property<string>("CharacterId");

                    b.Property<string>("AttackerFireModeId");

                    b.Property<string>("AttackerLoadoutId");

                    b.Property<string>("AttackerOutfitId");

                    b.Property<string>("AttackerVehicleId");

                    b.Property<string>("AttackerWeaponId");

                    b.Property<string>("CharacterLoadoutId");

                    b.Property<string>("CharacterOutfitId");

                    b.Property<bool>("IsHeadshot");

                    b.Property<string>("WorldId");

                    b.Property<string>("ZoneId");

                    b.HasKey("Timestamp", "AttackerCharacterId", "CharacterId");

                    b.HasIndex("AttackerCharacterId");

                    b.HasIndex("AttackerOutfitId");

                    b.HasIndex("AttackerVehicleId");

                    b.HasIndex("AttackerWeaponId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("CharacterOutfitId");

                    b.ToTable("EventDeath");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbEventFacilityControl", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("WorldId");

                    b.Property<string>("FacilityId");

                    b.Property<int>("DurationHeld");

                    b.Property<string>("NewFactionId");

                    b.Property<string>("OldFactionId");

                    b.Property<string>("OutfitId");

                    b.Property<float>("ZoneControlNc");

                    b.Property<float>("ZoneControlTr");

                    b.Property<float>("ZoneControlVs");

                    b.Property<string>("ZoneId");

                    b.HasKey("Timestamp", "WorldId", "FacilityId");

                    b.ToTable("EventFacilityControl");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbEventGainExperience", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("CharacterId");

                    b.Property<string>("ExperienceId");

                    b.Property<int>("Amount");

                    b.Property<string>("LoadoutId");

                    b.Property<string>("OtherId");

                    b.Property<string>("WorldId");

                    b.Property<string>("ZoneId");

                    b.HasKey("Timestamp", "CharacterId", "ExperienceId");

                    b.ToTable("EventGainExperience");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbEventMetagameEvent", b =>
                {
                    b.Property<string>("MetagameId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ExperienceBonus");

                    b.Property<string>("InstanceId");

                    b.Property<string>("MetagameEventId");

                    b.Property<string>("MetagameEventState");

                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("WorldId");

                    b.Property<float>("ZoneControlNc");

                    b.Property<float>("ZoneControlTr");

                    b.Property<float>("ZoneControlVs");

                    b.Property<string>("ZoneId");

                    b.HasKey("MetagameId");

                    b.ToTable("EventMetagameEvent");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbEventPlayerFacilityCapture", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("CharacterId");

                    b.Property<string>("FacilityId");

                    b.Property<string>("OutfitId");

                    b.Property<string>("WorldId");

                    b.Property<string>("ZoneId");

                    b.HasKey("Timestamp", "CharacterId", "FacilityId");

                    b.ToTable("EventPlayerFacilityCapture");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbEventPlayerFacilityDefend", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("CharacterId");

                    b.Property<string>("FacilityId");

                    b.Property<string>("OutfitId");

                    b.Property<string>("WorldId");

                    b.Property<string>("ZoneId");

                    b.HasKey("Timestamp", "CharacterId", "FacilityId");

                    b.ToTable("EventPlayerFacilityDefend");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbEventPlayerLogin", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("CharacterId");

                    b.Property<string>("WorldId");

                    b.HasKey("Timestamp", "CharacterId");

                    b.ToTable("EventPlayerLogin");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbEventPlayerLogout", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("CharacterId");

                    b.Property<string>("WorldId");

                    b.HasKey("Timestamp", "CharacterId");

                    b.ToTable("EventPlayerLogout");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbEventVehicleDestroy", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("AttackerCharacterId");

                    b.Property<string>("CharacterId");

                    b.Property<string>("AttackerLoadoutId");

                    b.Property<string>("AttackerVehicleId")
                        .IsRequired();

                    b.Property<string>("AttackerWeaponId");

                    b.Property<string>("FacilityId");

                    b.Property<string>("FactionId");

                    b.Property<string>("VehicleId")
                        .IsRequired();

                    b.Property<string>("WorldId");

                    b.Property<string>("ZoneId");

                    b.HasKey("Timestamp", "AttackerCharacterId", "CharacterId");

                    b.ToTable("EventVehicleDestroy");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbFacilityLink", b =>
                {
                    b.Property<string>("ZoneId");

                    b.Property<string>("FacilityIdA");

                    b.Property<string>("FacilityIdB");

                    b.Property<string>("Description");

                    b.Property<string>("Id")
                        .IsRequired();

                    b.HasKey("ZoneId", "FacilityIdA", "FacilityIdB");

                    b.ToTable("FacilityLink");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbFaction", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodeTag");

                    b.Property<string>("ImageId");

                    b.Property<string>("Name");

                    b.Property<bool>("UserSelectable");

                    b.HasKey("Id");

                    b.ToTable("Faction");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbItem", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("FactionId");

                    b.Property<string>("ImageId");

                    b.Property<bool>("IsVehicleWeapon");

                    b.Property<string>("ItemCategoryId");

                    b.Property<string>("ItemTypeId");

                    b.Property<int>("MaxStackSize");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("ItemCategoryId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbItemCategory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ItemCategory");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbMapHex", b =>
                {
                    b.Property<string>("ZoneId");

                    b.Property<string>("MapRegionId");

                    b.Property<string>("HexType");

                    b.Property<string>("Id")
                        .IsRequired();

                    b.Property<string>("TypeName");

                    b.Property<int>("XPos");

                    b.Property<int>("YPos");

                    b.HasKey("ZoneId", "MapRegionId");

                    b.ToTable("MapHex");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbMapRegion", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FacilityType");

                    b.Property<string>("FacilityTypeId");

                    b.Property<float>("XPos");

                    b.Property<float>("YPos");

                    b.Property<float>("ZPos");

                    b.Property<string>("ZoneId");

                    b.HasKey("Id");

                    b.ToTable("MapRegion");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbMetagameEventCategory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("ExperienceBonus");

                    b.Property<string>("Name");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("MetagameEventCategory");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbMetagameEventState", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("MetagameEventState");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbOutfit", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("FactionId");

                    b.Property<string>("LeaderCharacterId");

                    b.Property<int>("MemberCount");

                    b.Property<string>("Name");

                    b.Property<string>("WorldId");

                    b.HasKey("Id");

                    b.HasIndex("FactionId");

                    b.HasIndex("LeaderCharacterId");

                    b.HasIndex("WorldId");

                    b.ToTable("Outfit");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbOutfitMember", b =>
                {
                    b.Property<string>("CharacterId");

                    b.Property<DateTime>("MemberSinceDate");

                    b.Property<string>("OutfitId")
                        .IsRequired();

                    b.Property<string>("Rank");

                    b.Property<int>("RankOrdinal");

                    b.HasKey("CharacterId");

                    b.HasIndex("OutfitId");

                    b.ToTable("OutfitMember");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbPlayerSession", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CharacterId")
                        .IsRequired();

                    b.Property<int>("Duration");

                    b.Property<DateTime>("LoginDate");

                    b.Property<DateTime>("LogoutDate");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId", "LoginDate", "LogoutDate");

                    b.ToTable("PlayerSession");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbProfile", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FactionId");

                    b.Property<string>("ImageId");

                    b.Property<string>("Name");

                    b.Property<string>("ProfileTypeId");

                    b.HasKey("Id");

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbTitle", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Title");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbVehicle", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Cost");

                    b.Property<string>("CostResourceId");

                    b.Property<string>("Description");

                    b.Property<string>("ImageId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbVehicleFaction", b =>
                {
                    b.Property<string>("VehicleId");

                    b.Property<string>("FactionId");

                    b.Property<string>("DbVehicleId");

                    b.HasKey("VehicleId", "FactionId");

                    b.HasIndex("DbVehicleId");

                    b.ToTable("VehicleFaction");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbWorld", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("World");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbZone", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<int>("HexSize");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Zone");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbAlert", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbMetagameEventCategory", "MetagameEvent")
                        .WithMany()
                        .HasForeignKey("MetagameEventId");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacter", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbFaction", "Faction")
                        .WithMany()
                        .HasForeignKey("FactionId");

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacterTime", "Time")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbOutfitMember", "OutfitMembership")
                        .WithMany()
                        .HasForeignKey("Id")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbTitle", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId");

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbWorld", "World")
                        .WithMany()
                        .HasForeignKey("WorldId");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacterStat", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacter", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacter")
                        .WithMany("Stats")
                        .HasForeignKey("Id");

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbProfile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacterStatByFaction", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacter", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacter")
                        .WithMany("StatsByFaction")
                        .HasForeignKey("Id");

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbProfile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacterTime", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacter", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacterWeaponStat", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacter", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacter")
                        .WithMany("WeaponStats")
                        .HasForeignKey("Id");

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbItem", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbVehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacterWeaponStatByFaction", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacter", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacter")
                        .WithMany("WeaponStatsByFaction")
                        .HasForeignKey("Id");

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbItem", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbVehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbEventDeath", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacter", "AttackerCharacter")
                        .WithMany()
                        .HasForeignKey("AttackerCharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbOutfit", "AttackerOutfit")
                        .WithMany()
                        .HasForeignKey("AttackerOutfitId");

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbVehicle", "AttackerVehicle")
                        .WithMany()
                        .HasForeignKey("AttackerVehicleId");

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbItem", "AttackerWeapon")
                        .WithMany()
                        .HasForeignKey("AttackerWeaponId");

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacter", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbOutfit", "CharacterOutfit")
                        .WithMany()
                        .HasForeignKey("CharacterOutfitId");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbItem", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbItemCategory", "ItemCategory")
                        .WithMany()
                        .HasForeignKey("ItemCategoryId");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbOutfit", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbFaction", "Faction")
                        .WithMany()
                        .HasForeignKey("FactionId");

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacter", "Leader")
                        .WithMany()
                        .HasForeignKey("LeaderCharacterId");

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbWorld", "World")
                        .WithMany()
                        .HasForeignKey("WorldId");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbOutfitMember", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacter", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbOutfit", "Outfit")
                        .WithMany()
                        .HasForeignKey("OutfitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbVehicleFaction", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbVehicle")
                        .WithMany("Faction")
                        .HasForeignKey("DbVehicleId");
                });
#pragma warning restore 612, 618
        }
    }
}

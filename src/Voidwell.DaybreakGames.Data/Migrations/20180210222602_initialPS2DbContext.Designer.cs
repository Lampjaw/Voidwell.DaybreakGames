// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using Voidwell.DaybreakGames.Data;

namespace Voidwell.DaybreakGames.Data.Migrations
{
    [DbContext(typeof(PS2DbContext))]
    [Migration("20180210222602_initialPS2DbContext")]
    partial class initialPS2DbContext
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Alert", b =>
                {
                    b.Property<int>("WorldId");

                    b.Property<int>("MetagameInstanceId");

                    b.Property<DateTime>("EndDate");

                    b.Property<float?>("LastFactionNc");

                    b.Property<float?>("LastFactionTr");

                    b.Property<float?>("LastFactionVs");

                    b.Property<int>("MetagameEventId");

                    b.Property<DateTime>("StartDate");

                    b.Property<float?>("StartFactionNc");

                    b.Property<float?>("StartFactionTr");

                    b.Property<float?>("StartFactionVs");

                    b.Property<int?>("ZoneId");

                    b.HasKey("WorldId", "MetagameInstanceId");

                    b.ToTable("Alert");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Character", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BattleRank");

                    b.Property<int>("BattleRankPercentToNext");

                    b.Property<int>("CertsEarned");

                    b.Property<int>("FactionId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("TitleId");

                    b.Property<int>("WorldId");

                    b.HasKey("Id");

                    b.ToTable("Character");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterLifetimeStat", b =>
                {
                    b.Property<string>("CharacterId");

                    b.Property<int?>("AchievementCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("AssistCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("DominationCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("FacilityCaptureCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("FacilityDefendedCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("MedalCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("RevengeCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("SkillPoints")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponDamageGiven")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponDamageTakenBy")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponDeaths")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponFireCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponHeadshots")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponHitCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponKills")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponPlayTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponScore")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponVehicleKills")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("CharacterId");

                    b.ToTable("CharacterLifetimeStat");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterLifetimeStatByFaction", b =>
                {
                    b.Property<string>("CharacterId");

                    b.Property<int?>("DominationCountNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("DominationCountTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("DominationCountVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("FacilityCaptureCountNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("FacilityCaptureCountTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("FacilityCaptureCountVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("RevengeCountNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("RevengeCountTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("RevengeCountVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponDamageGivenNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponDamageGivenTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponDamageGivenVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponDamageTakenByNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponDamageTakenByTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponDamageTakenByVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponHeadshotsNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponHeadshotsTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponHeadshotsVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponKilledByNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponKilledByTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponKilledByVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponKillsNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponKillsTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponKillsVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponVehicleKillsNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponVehicleKillsTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponVehicleKillsVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("CharacterId");

                    b.ToTable("CharacterLifetimeStatByFaction");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterStat", b =>
                {
                    b.Property<string>("CharacterId");

                    b.Property<int>("ProfileId");

                    b.Property<int?>("Deaths")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("FireCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("HitCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("KilledBy")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("Kills")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("PlayTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("Score")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("CharacterId", "ProfileId");

                    b.ToTable("CharacterStat");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterStatByFaction", b =>
                {
                    b.Property<string>("CharacterId");

                    b.Property<int>("ProfileId");

                    b.Property<int?>("KilledByNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("KilledByTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("KilledByVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("KillsNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("KillsTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("KillsVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("CharacterId", "ProfileId");

                    b.ToTable("CharacterStatByFaction");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterTime", b =>
                {
                    b.Property<string>("CharacterId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("LastLoginDate");

                    b.Property<DateTime>("LastSaveDate");

                    b.Property<int>("MinutesPlayed");

                    b.HasKey("CharacterId");

                    b.ToTable("CharacterTime");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterUpdateQueue", b =>
                {
                    b.Property<string>("CharacterId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Timestamp");

                    b.HasKey("CharacterId");

                    b.ToTable("CharacterUpdateQueue");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterWeaponStat", b =>
                {
                    b.Property<string>("CharacterId");

                    b.Property<int>("ItemId");

                    b.Property<int>("VehicleId");

                    b.Property<int?>("DamageGiven")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("DamageTakenBy")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("Deaths")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("FireCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("Headshots")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("HitCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("KilledBy")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("Kills")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("PlayTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("Score")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("VehicleKills")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("CharacterId", "ItemId", "VehicleId");

                    b.HasIndex("Kills");

                    b.ToTable("CharacterWeaponStat");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterWeaponStatByFaction", b =>
                {
                    b.Property<string>("CharacterId");

                    b.Property<int>("ItemId");

                    b.Property<int>("VehicleId");

                    b.Property<int?>("DamageGivenNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("DamageGivenTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("DamageGivenVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("DamageTakenByNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("DamageTakenByTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("DamageTakenByVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("HeadshotsNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("HeadshotsTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("HeadshotsVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("KilledByNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("KilledByTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("KilledByVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("KillsNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("KillsTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("KillsVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("VehicleKillsNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("VehicleKillsTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("VehicleKillsVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("CharacterId", "ItemId", "VehicleId");

                    b.ToTable("CharacterWeaponStatByFaction");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.AchievementEarned", b =>
                {
                    b.Property<string>("CharacterId");

                    b.Property<DateTime>("Timestamp");

                    b.Property<int>("AchievementId");

                    b.Property<int>("WorldId");

                    b.Property<int>("ZoneId");

                    b.HasKey("CharacterId", "Timestamp");

                    b.ToTable("EventAchievementEarned");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.BattlerankUp", b =>
                {
                    b.Property<string>("CharacterId");

                    b.Property<DateTime>("Timestamp");

                    b.Property<int>("BattleRank");

                    b.Property<int>("WorldId");

                    b.Property<int>("ZoneId");

                    b.HasKey("CharacterId", "Timestamp");

                    b.ToTable("EventBattlerankUp");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.ContinentLock", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<int>("WorldId");

                    b.Property<int>("ZoneId");

                    b.Property<int?>("MetagameEventId");

                    b.Property<float?>("PopulationNc");

                    b.Property<float?>("PopulationTr");

                    b.Property<float?>("PopulationVs");

                    b.Property<int?>("TriggeringFaction");

                    b.HasKey("Timestamp", "WorldId", "ZoneId");

                    b.ToTable("EventContinentLock");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.ContinentUnlock", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<int>("WorldId");

                    b.Property<int>("ZoneId");

                    b.Property<int?>("MetagameEventId");

                    b.Property<int?>("TriggeringFaction");

                    b.HasKey("Timestamp", "WorldId", "ZoneId");

                    b.ToTable("EventContinentUnlock");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.Death", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("AttackerCharacterId");

                    b.Property<string>("CharacterId");

                    b.Property<int?>("AttackerFireModeId");

                    b.Property<int?>("AttackerLoadoutId");

                    b.Property<string>("AttackerOutfitId");

                    b.Property<int?>("AttackerVehicleId");

                    b.Property<int?>("AttackerWeaponId");

                    b.Property<int?>("CharacterLoadoutId");

                    b.Property<string>("CharacterOutfitId");

                    b.Property<bool>("IsHeadshot");

                    b.Property<int>("WorldId");

                    b.Property<int>("ZoneId");

                    b.HasKey("Timestamp", "AttackerCharacterId", "CharacterId");

                    b.ToTable("EventDeath");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.FacilityControl", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<int>("WorldId");

                    b.Property<int>("FacilityId");

                    b.Property<int>("DurationHeld");

                    b.Property<int?>("NewFactionId");

                    b.Property<int?>("OldFactionId");

                    b.Property<string>("OutfitId");

                    b.Property<float?>("ZoneControlNc");

                    b.Property<float?>("ZoneControlTr");

                    b.Property<float?>("ZoneControlVs");

                    b.Property<int>("ZoneId");

                    b.HasKey("Timestamp", "WorldId", "FacilityId");

                    b.ToTable("EventFacilityControl");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.GainExperience", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("CharacterId");

                    b.Property<int>("ExperienceId");

                    b.Property<int>("Amount");

                    b.Property<int?>("LoadoutId");

                    b.Property<string>("OtherId");

                    b.Property<int>("WorldId");

                    b.Property<int>("ZoneId");

                    b.HasKey("Timestamp", "CharacterId", "ExperienceId");

                    b.ToTable("EventGainExperience");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.MetagameEvent", b =>
                {
                    b.Property<int>("MetagameId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ExperienceBonus");

                    b.Property<int?>("InstanceId");

                    b.Property<int?>("MetagameEventId");

                    b.Property<string>("MetagameEventState");

                    b.Property<DateTime>("Timestamp");

                    b.Property<int>("WorldId");

                    b.Property<float?>("ZoneControlNc");

                    b.Property<float?>("ZoneControlTr");

                    b.Property<float?>("ZoneControlVs");

                    b.Property<int?>("ZoneId");

                    b.HasKey("MetagameId");

                    b.ToTable("EventMetagameEvent");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.PlayerFacilityCapture", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("CharacterId");

                    b.Property<int>("FacilityId");

                    b.Property<string>("OutfitId");

                    b.Property<int>("WorldId");

                    b.Property<int>("ZoneId");

                    b.HasKey("Timestamp", "CharacterId", "FacilityId");

                    b.ToTable("EventPlayerFacilityCapture");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.PlayerFacilityDefend", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("CharacterId");

                    b.Property<int>("FacilityId");

                    b.Property<string>("OutfitId");

                    b.Property<int>("WorldId");

                    b.Property<int>("ZoneId");

                    b.HasKey("Timestamp", "CharacterId", "FacilityId");

                    b.ToTable("EventPlayerFacilityDefend");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.PlayerLogin", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("CharacterId");

                    b.Property<int>("WorldId");

                    b.HasKey("Timestamp", "CharacterId");

                    b.ToTable("EventPlayerLogin");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.PlayerLogout", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("CharacterId");

                    b.Property<int>("WorldId");

                    b.HasKey("Timestamp", "CharacterId");

                    b.ToTable("EventPlayerLogout");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Events.VehicleDestroy", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("AttackerCharacterId");

                    b.Property<string>("CharacterId");

                    b.Property<int?>("AttackerLoadoutId");

                    b.Property<int?>("AttackerVehicleId")
                        .IsRequired();

                    b.Property<int?>("AttackerWeaponId");

                    b.Property<int?>("FacilityId");

                    b.Property<int?>("FactionId");

                    b.Property<int?>("VehicleId")
                        .IsRequired();

                    b.Property<int>("WorldId");

                    b.Property<int>("ZoneId");

                    b.HasKey("Timestamp", "AttackerCharacterId", "CharacterId");

                    b.ToTable("EventVehicleDestroy");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.FacilityLink", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("FacilityIdA");

                    b.Property<int>("FacilityIdB");

                    b.Property<int>("ZoneId");

                    b.HasKey("Id");

                    b.ToTable("FacilityLink");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Faction", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("CodeTag");

                    b.Property<int?>("ImageId");

                    b.Property<string>("Name");

                    b.Property<bool>("UserSelectable");

                    b.HasKey("Id");

                    b.ToTable("Faction");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Item", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description");

                    b.Property<int?>("FactionId");

                    b.Property<int?>("ImageId");

                    b.Property<bool>("IsVehicleWeapon");

                    b.Property<int?>("ItemCategoryId");

                    b.Property<int?>("ItemTypeId");

                    b.Property<int?>("MaxStackSize");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.ItemCategory", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ItemCategory");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.MapHex", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("HexType");

                    b.Property<int>("MapRegionId");

                    b.Property<string>("TypeName");

                    b.Property<int>("XPos");

                    b.Property<int>("YPos");

                    b.Property<int>("ZoneId");

                    b.HasKey("Id");

                    b.ToTable("MapHex");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.MapRegion", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FacilityType");

                    b.Property<int>("FacilityTypeId");

                    b.Property<float>("XPos");

                    b.Property<float>("YPos");

                    b.Property<float>("ZPos");

                    b.Property<int>("ZoneId");

                    b.HasKey("Id");

                    b.ToTable("MapRegion");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.MetagameEventCategory", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Description");

                    b.Property<int?>("ExperienceBonus");

                    b.Property<string>("Name");

                    b.Property<int?>("Type");

                    b.HasKey("Id");

                    b.ToTable("MetagameEventCategory");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.MetagameEventState", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("MetagameEventState");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Outfit", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<int?>("FactionId");

                    b.Property<string>("LeaderCharacterId");

                    b.Property<int>("MemberCount");

                    b.Property<string>("Name");

                    b.Property<int?>("WorldId");

                    b.HasKey("Id");

                    b.HasIndex("FactionId");

                    b.HasIndex("WorldId");

                    b.ToTable("Outfit");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.OutfitMember", b =>
                {
                    b.Property<string>("CharacterId");

                    b.Property<DateTime?>("MemberSinceDate");

                    b.Property<string>("OutfitId")
                        .IsRequired();

                    b.Property<string>("Rank");

                    b.Property<int?>("RankOrdinal");

                    b.HasKey("CharacterId");

                    b.ToTable("OutfitMember");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.PlayerSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CharacterId")
                        .IsRequired();

                    b.Property<int>("Duration");

                    b.Property<DateTime>("LoginDate");

                    b.Property<DateTime>("LogoutDate");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId", "LoginDate", "LogoutDate");

                    b.ToTable("PlayerSession");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Profile", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("FactionId");

                    b.Property<int>("ImageId");

                    b.Property<string>("Name");

                    b.Property<int>("ProfileTypeId");

                    b.HasKey("Id");

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Title", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Title");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Vehicle", b =>
                {
                    b.Property<int>("Id");

                    b.Property<int>("Cost");

                    b.Property<int?>("CostResourceId");

                    b.Property<string>("Description");

                    b.Property<int?>("ImageId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.VehicleFaction", b =>
                {
                    b.Property<int>("VehicleId");

                    b.Property<int>("FactionId");

                    b.HasKey("VehicleId", "FactionId");

                    b.ToTable("VehicleFaction");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.World", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("World");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Zone", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<int?>("HexSize");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Zone");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.UpdaterScheduler", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("LastUpdateDate");

                    b.HasKey("Id");

                    b.ToTable("UpdaterScheduler");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterLifetimeStat", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Character", "Character")
                        .WithOne("LifetimeStats")
                        .HasForeignKey("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterLifetimeStat", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterLifetimeStatByFaction", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Character", "Character")
                        .WithOne("LifetimeStatsByFaction")
                        .HasForeignKey("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterLifetimeStatByFaction", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterStat", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Character", "Character")
                        .WithMany("Stats")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterStatByFaction", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Character", "Character")
                        .WithMany("StatsByFaction")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterTime", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Character", "Character")
                        .WithOne("Time")
                        .HasForeignKey("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterTime", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterWeaponStat", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Character", "Character")
                        .WithMany("WeaponStats")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.CharacterWeaponStatByFaction", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Character", "Character")
                        .WithMany("WeaponStatsByFaction")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Outfit", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Faction", "Faction")
                        .WithMany()
                        .HasForeignKey("FactionId");

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.World", "World")
                        .WithMany()
                        .HasForeignKey("WorldId");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.OutfitMember", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Character", "Character")
                        .WithOne("OutfitMembership")
                        .HasForeignKey("Voidwell.DaybreakGames.Data.Models.Planetside.OutfitMember", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.VehicleFaction", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.Vehicle", "Vehicle")
                        .WithMany("Faction")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}

// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;
using Voidwell.DaybreakGames.Data;

namespace Voidwell.DaybreakGames.Data.Migrations
{
    [DbContext(typeof(PS2DbContext))]
    [Migration("20180203214531_initialPS2DbContext")]
    partial class initialPS2DbContext
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125");

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Alert", b =>
                {
                    b.Property<string>("WorldId");

                    b.Property<string>("MetagameInstanceId");

                    b.Property<DateTime>("EndDate");

                    b.Property<float>("LastFactionNc");

                    b.Property<float>("LastFactionTr");

                    b.Property<float>("LastFactionVs");

                    b.Property<string>("MetagameEventId");

                    b.Property<string>("ShadowMetagameEventId");

                    b.Property<DateTime>("StartDate");

                    b.Property<float>("StartFactionNc");

                    b.Property<float>("StartFactionTr");

                    b.Property<float>("StartFactionVs");

                    b.Property<string>("ZoneId");

                    b.HasKey("WorldId", "MetagameInstanceId");

                    b.HasIndex("ShadowMetagameEventId");

                    b.ToTable("Alert");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacter", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BattleRank");

                    b.Property<int>("BattleRankPercentToNext");

                    b.Property<int>("CertsEarned");

                    b.Property<string>("FactionId");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("TitleId");

                    b.Property<string>("WorldId");

                    b.HasKey("Id");

                    b.HasIndex("FactionId");

                    b.HasIndex("TitleId");

                    b.HasIndex("WorldId");

                    b.ToTable("Character");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacterLifetimeStat", b =>
                {
                    b.Property<string>("CharacterId");

                    b.Property<int?>("AchievementCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("AssistCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("DominationCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("FacilityCaptureCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("FacilityDefendedCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("MedalCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("RevengeCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("SkillPoints")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponDamageGiven")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponDamageTakenBy")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponDeaths")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponFireCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponHeadshots")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponHitCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponKills")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponPlayTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponScore")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponVehicleKills")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("CharacterId");

                    b.ToTable("CharacterLifetimeStat");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacterLifetimeStatByFaction", b =>
                {
                    b.Property<string>("CharacterId");

                    b.Property<int?>("DominationCountNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("DominationCountTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("DominationCountVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("FacilityCaptureCountNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("FacilityCaptureCountTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("FacilityCaptureCountVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("RevengeCountNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("RevengeCountTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("RevengeCountVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponDamageGivenNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponDamageGivenTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponDamageGivenVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponDamageTakenByNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponDamageTakenByTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponDamageTakenByVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponHeadshotsNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponHeadshotsTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponHeadshotsVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponKilledByNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponKilledByTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponKilledByVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponKillsNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponKillsTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponKillsVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponVehicleKillsNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponVehicleKillsTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("WeaponVehicleKillsVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("CharacterId");

                    b.ToTable("CharacterLifetimeStatByFaction");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacterStat", b =>
                {
                    b.Property<string>("CharacterId");

                    b.Property<string>("ProfileId");

                    b.Property<int?>("Deaths")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("FireCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("HitCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("KilledBy")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("Kills")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("PlayTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("Score")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("CharacterId", "ProfileId");

                    b.HasIndex("ProfileId");

                    b.ToTable("CharacterStat");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacterStatByFaction", b =>
                {
                    b.Property<string>("CharacterId");

                    b.Property<string>("ProfileId");

                    b.Property<int?>("KilledByNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("KilledByTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("KilledByVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("KillsNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("KillsTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("KillsVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("CharacterId", "ProfileId");

                    b.HasIndex("ProfileId");

                    b.ToTable("CharacterStatByFaction");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacterTime", b =>
                {
                    b.Property<string>("CharacterId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime>("LastLoginDate");

                    b.Property<DateTime>("LastSaveDate");

                    b.Property<int>("MinutesPlayed");

                    b.HasKey("CharacterId");

                    b.ToTable("CharacterTime");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacterUpdateQueue", b =>
                {
                    b.Property<string>("CharacterId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Timestamp");

                    b.HasKey("CharacterId");

                    b.ToTable("CharacterUpdateQueue");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacterWeaponStat", b =>
                {
                    b.Property<string>("CharacterId");

                    b.Property<string>("ItemId");

                    b.Property<string>("VehicleId");

                    b.Property<int?>("DamageGiven")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("DamageTakenBy")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("Deaths")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("FireCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("Headshots")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("HitCount")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("KilledBy")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("Kills")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("PlayTime")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("Score")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("VehicleKills")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("CharacterId", "ItemId", "VehicleId");

                    b.HasIndex("ItemId");

                    b.HasIndex("Kills");

                    b.HasIndex("VehicleId");

                    b.ToTable("CharacterWeaponStat");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacterWeaponStatByFaction", b =>
                {
                    b.Property<string>("CharacterId");

                    b.Property<string>("ItemId");

                    b.Property<string>("VehicleId");

                    b.Property<int?>("DamageGivenNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("DamageGivenTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("DamageGivenVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("DamageTakenByNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("DamageTakenByTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("DamageTakenByVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("HeadshotsNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("HeadshotsTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("HeadshotsVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("KilledByNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("KilledByTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("KilledByVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("KillsNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("KillsTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("KillsVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("VehicleKillsNC")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("VehicleKillsTR")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.Property<int?>("VehicleKillsVS")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(0);

                    b.HasKey("CharacterId", "ItemId", "VehicleId");

                    b.HasIndex("ItemId");

                    b.HasIndex("VehicleId");

                    b.ToTable("CharacterWeaponStatByFaction");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbEventAchievementEarned", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("CharacterId");

                    b.Property<string>("AchievementId");

                    b.Property<string>("WorldId");

                    b.Property<string>("ZoneId");

                    b.HasKey("Timestamp", "CharacterId");

                    b.ToTable("EventAchievementEarned");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbEventBattlerankUp", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("CharacterId");

                    b.Property<int>("BattleRank");

                    b.Property<string>("WorldId");

                    b.Property<string>("ZoneId");

                    b.HasKey("Timestamp", "CharacterId");

                    b.ToTable("EventBattlerankUp");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbEventContinentLock", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("WorldId");

                    b.Property<string>("ZoneId");

                    b.Property<string>("MetagameEventId");

                    b.Property<float>("PopulationNc");

                    b.Property<float>("PopulationTr");

                    b.Property<float>("PopulationVs");

                    b.Property<string>("TriggeringFaction");

                    b.HasKey("Timestamp", "WorldId", "ZoneId");

                    b.ToTable("EventContinentLock");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbEventContinentUnlock", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("WorldId");

                    b.Property<string>("ZoneId");

                    b.Property<string>("MetagameEventId");

                    b.Property<string>("TriggeringFaction");

                    b.HasKey("Timestamp", "WorldId", "ZoneId");

                    b.ToTable("EventContinentUnkock");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbEventDeath", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("AttackerCharacterId");

                    b.Property<string>("CharacterId");

                    b.Property<string>("AttackerFireModeId");

                    b.Property<string>("AttackerLoadoutId");

                    b.Property<string>("AttackerOutfitId");

                    b.Property<string>("AttackerVehicleId");

                    b.Property<string>("AttackerWeaponId");

                    b.Property<string>("CharacterLoadoutId");

                    b.Property<string>("CharacterOutfitId");

                    b.Property<bool>("IsHeadshot");

                    b.Property<string>("WorldId");

                    b.Property<string>("ZoneId");

                    b.HasKey("Timestamp", "AttackerCharacterId", "CharacterId");

                    b.ToTable("EventDeath");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbEventFacilityControl", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("WorldId");

                    b.Property<string>("FacilityId");

                    b.Property<int>("DurationHeld");

                    b.Property<string>("NewFactionId");

                    b.Property<string>("OldFactionId");

                    b.Property<string>("OutfitId");

                    b.Property<float>("ZoneControlNc");

                    b.Property<float>("ZoneControlTr");

                    b.Property<float>("ZoneControlVs");

                    b.Property<string>("ZoneId");

                    b.HasKey("Timestamp", "WorldId", "FacilityId");

                    b.ToTable("EventFacilityControl");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbEventGainExperience", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("CharacterId");

                    b.Property<string>("ExperienceId");

                    b.Property<int>("Amount");

                    b.Property<string>("LoadoutId");

                    b.Property<string>("OtherId");

                    b.Property<string>("WorldId");

                    b.Property<string>("ZoneId");

                    b.HasKey("Timestamp", "CharacterId", "ExperienceId");

                    b.ToTable("EventGainExperience");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbEventMetagameEvent", b =>
                {
                    b.Property<string>("MetagameId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ExperienceBonus");

                    b.Property<string>("InstanceId");

                    b.Property<string>("MetagameEventId");

                    b.Property<string>("MetagameEventState");

                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("WorldId");

                    b.Property<float>("ZoneControlNc");

                    b.Property<float>("ZoneControlTr");

                    b.Property<float>("ZoneControlVs");

                    b.Property<string>("ZoneId");

                    b.HasKey("MetagameId");

                    b.ToTable("EventMetagameEvent");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbEventPlayerFacilityCapture", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("CharacterId");

                    b.Property<string>("FacilityId");

                    b.Property<string>("OutfitId");

                    b.Property<string>("WorldId");

                    b.Property<string>("ZoneId");

                    b.HasKey("Timestamp", "CharacterId", "FacilityId");

                    b.ToTable("EventPlayerFacilityCapture");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbEventPlayerFacilityDefend", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("CharacterId");

                    b.Property<string>("FacilityId");

                    b.Property<string>("OutfitId");

                    b.Property<string>("WorldId");

                    b.Property<string>("ZoneId");

                    b.HasKey("Timestamp", "CharacterId", "FacilityId");

                    b.ToTable("EventPlayerFacilityDefend");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbEventPlayerLogin", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("CharacterId");

                    b.Property<string>("WorldId");

                    b.HasKey("Timestamp", "CharacterId");

                    b.ToTable("EventPlayerLogin");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbEventPlayerLogout", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("CharacterId");

                    b.Property<string>("WorldId");

                    b.HasKey("Timestamp", "CharacterId");

                    b.ToTable("EventPlayerLogout");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbEventVehicleDestroy", b =>
                {
                    b.Property<DateTime>("Timestamp");

                    b.Property<string>("AttackerCharacterId");

                    b.Property<string>("CharacterId");

                    b.Property<string>("AttackerLoadoutId");

                    b.Property<string>("AttackerVehicleId")
                        .IsRequired();

                    b.Property<string>("AttackerWeaponId");

                    b.Property<string>("FacilityId");

                    b.Property<string>("FactionId");

                    b.Property<string>("VehicleId")
                        .IsRequired();

                    b.Property<string>("WorldId");

                    b.Property<string>("ZoneId");

                    b.HasKey("Timestamp", "AttackerCharacterId", "CharacterId");

                    b.ToTable("EventVehicleDestroy");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbFacilityLink", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("FacilityIdA");

                    b.Property<string>("FacilityIdB");

                    b.Property<string>("ZoneId");

                    b.HasKey("Id");

                    b.ToTable("FacilityLink");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbFaction", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodeTag");

                    b.Property<string>("ImageId");

                    b.Property<string>("Name");

                    b.Property<bool>("UserSelectable");

                    b.HasKey("Id");

                    b.ToTable("Faction");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbItem", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("FactionId");

                    b.Property<string>("ImageId");

                    b.Property<bool>("IsVehicleWeapon");

                    b.Property<int?>("ItemCategoryId");

                    b.Property<string>("ItemTypeId");

                    b.Property<int>("MaxStackSize");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("ItemCategoryId");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbItemCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("ItemCategory");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbMapHex", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("HexType");

                    b.Property<string>("MapRegionId")
                        .IsRequired();

                    b.Property<string>("TypeName");

                    b.Property<int>("XPos");

                    b.Property<int>("YPos");

                    b.Property<string>("ZoneId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("MapHex");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbMapRegion", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FacilityId");

                    b.Property<string>("FacilityName");

                    b.Property<string>("FacilityType");

                    b.Property<string>("FacilityTypeId");

                    b.Property<float>("XPos");

                    b.Property<float>("YPos");

                    b.Property<float>("ZPos");

                    b.Property<string>("ZoneId");

                    b.HasKey("Id");

                    b.ToTable("MapRegion");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbMetagameEventCategory", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("ExperienceBonus");

                    b.Property<string>("Name");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("MetagameEventCategory");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbMetagameEventState", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("MetagameEventState");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbOutfit", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("FactionId");

                    b.Property<string>("LeaderCharacterId");

                    b.Property<int>("MemberCount");

                    b.Property<string>("Name");

                    b.Property<string>("WorldId");

                    b.HasKey("Id");

                    b.HasIndex("FactionId");

                    b.HasIndex("LeaderCharacterId");

                    b.HasIndex("WorldId");

                    b.ToTable("Outfit");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbOutfitMember", b =>
                {
                    b.Property<string>("CharacterId");

                    b.Property<DateTime?>("MemberSinceDate");

                    b.Property<string>("OutfitId")
                        .IsRequired();

                    b.Property<string>("Rank");

                    b.Property<int?>("RankOrdinal");

                    b.HasKey("CharacterId");

                    b.HasIndex("OutfitId");

                    b.ToTable("OutfitMember");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbPlayerSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CharacterId")
                        .IsRequired();

                    b.Property<int>("Duration");

                    b.Property<DateTime>("LoginDate");

                    b.Property<DateTime>("LogoutDate");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId", "LoginDate", "LogoutDate");

                    b.ToTable("PlayerSession");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbProfile", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("FactionId");

                    b.Property<string>("ImageId");

                    b.Property<string>("Name");

                    b.Property<string>("ProfileTypeId");

                    b.HasKey("Id");

                    b.ToTable("Profile");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbPS2UpdaterScheduler", b =>
                {
                    b.Property<string>("ServiceName")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("LastUpdateDate");

                    b.HasKey("ServiceName");

                    b.ToTable("PS2UpdaterScheduler");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbTitle", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Title");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbVehicle", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Cost");

                    b.Property<string>("CostResourceId");

                    b.Property<string>("Description");

                    b.Property<string>("ImageId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbVehicleFaction", b =>
                {
                    b.Property<string>("VehicleId");

                    b.Property<string>("FactionId");

                    b.HasKey("VehicleId", "FactionId");

                    b.ToTable("VehicleFaction");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbWorld", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("World");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbZone", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Code");

                    b.Property<string>("Description");

                    b.Property<int>("HexSize");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Zone");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.Alert", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbMetagameEventCategory", "MetagameEvent")
                        .WithMany()
                        .HasForeignKey("ShadowMetagameEventId");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacter", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbFaction", "Faction")
                        .WithMany()
                        .HasForeignKey("FactionId");

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbTitle", "Title")
                        .WithMany()
                        .HasForeignKey("TitleId");

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbWorld", "World")
                        .WithMany()
                        .HasForeignKey("WorldId");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacterLifetimeStat", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacter", "Character")
                        .WithOne("LifetimeStats")
                        .HasForeignKey("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacterLifetimeStat", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacterLifetimeStatByFaction", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacter", "Character")
                        .WithOne("LifetimeStatsByFaction")
                        .HasForeignKey("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacterLifetimeStatByFaction", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacterStat", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacter", "Character")
                        .WithMany("Stats")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbProfile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacterStatByFaction", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacter", "Character")
                        .WithMany("StatsByFaction")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbProfile", "Profile")
                        .WithMany()
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacterTime", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacter", "Character")
                        .WithOne("Time")
                        .HasForeignKey("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacterTime", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacterWeaponStat", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacter", "Character")
                        .WithMany("WeaponStats")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbItem", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbVehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacterWeaponStatByFaction", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacter", "Character")
                        .WithMany("WeaponStatsByFaction")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbItem", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbVehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbItem", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbItemCategory", "ItemCategory")
                        .WithMany()
                        .HasForeignKey("ItemCategoryId");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbOutfit", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbFaction", "Faction")
                        .WithMany()
                        .HasForeignKey("FactionId");

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacter", "LeaderCharacter")
                        .WithMany()
                        .HasForeignKey("LeaderCharacterId");

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbWorld", "World")
                        .WithMany()
                        .HasForeignKey("WorldId");
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbOutfitMember", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbCharacter", "Character")
                        .WithOne("OutfitMembership")
                        .HasForeignKey("Voidwell.DaybreakGames.Data.Models.Planetside.DbOutfitMember", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbOutfit", "Outfit")
                        .WithMany()
                        .HasForeignKey("OutfitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Voidwell.DaybreakGames.Data.Models.Planetside.DbVehicleFaction", b =>
                {
                    b.HasOne("Voidwell.DaybreakGames.Data.Models.Planetside.DbVehicle", "Vehicle")
                        .WithMany("Faction")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
